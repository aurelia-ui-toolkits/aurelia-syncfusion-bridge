{"version":3,"sources":["common/widget-base.js"],"names":[],"mappings":"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","file":"common/widget-base.js","sourceRoot":"/source/","sourcesContent":["import {getEventOption} from './events';\r\nimport {TaskQueue} from 'aurelia-task-queue';\r\nimport {Util} from '../common/util';\r\n\r\nlet firstValue = {};\r\nexport class WidgetBase {\r\n/**\r\n* To Create an widget\r\n* @param option Object which contains  Element in which  widget will be created\r\n*/\r\n  createWidget(option) {\r\n    this.allOption = this.getWidgetOptions(option.element);\r\n    if (!this.ejOptions) {\r\n      this.createTwoWays();\r\n    }\r\n    this.widget = jQuery($(option.element))[this.controlName](this.allOption ).data(this.controlName);\r\n    if (this.templateProcessor) {\r\n      this.templateProcessor.initWidgetDependancies();\r\n    }\r\n  }\r\n\r\n  createTwoWays() {\r\n    let model = this.allOption;\r\n    let twoWays = this.twoWays;\r\n    let len = twoWays.length;\r\n    for (let i = 0; i < len; i++) {\r\n      let prop = twoWays[i];\r\n      ej.createObject(prop, this.addTwoways(prop), model);\r\n    }\r\n  }\r\n\r\n  addTwoways(prop) {\r\n    let model = this;\r\n    let value = firstValue;\r\n    return function(newVal, isApp) {\r\n      if (value === firstValue) {\r\n        let viewModelProp = model.util.getBindablePropertyName(prop);\r\n        value = model[viewModelProp];\r\n        if (value === undefined) {\r\n          value = this.defaults[prop];\r\n        }\r\n        return value;\r\n      }\r\n      if (newVal === undefined) {\r\n        return value;\r\n      }\r\n      if (value === newVal) {\r\n        return null;\r\n      }\r\n      value = newVal;\r\n      if (!isApp && model.util.hasValue(newVal) ) {\r\n        let viewModelProp = model.util.getBindablePropertyName(prop);\r\n        model[viewModelProp] = newVal;\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n/**\r\n* To get property and event options from the element\r\n* @param element Element from which options are acquired\r\n*/\r\n  getWidgetOptions(element) {\r\n    let propOptions;\r\n    if (this.ejOptions) {\r\n      propOptions = this.ejOptions;\r\n    } else {\r\n      propOptions = this.util.getOptions(this, this.controlProperties);\r\n    }\r\n    let eventOption = getEventOption(element);\r\n    if (this.hasChildProperty) {\r\n      this.getChildProperties(propOptions);\r\n    }\r\n    return Object.assign({}, propOptions, eventOption);\r\n  }\r\n\r\n  getChildProperties(options) {\r\n    let PropertyName = this.childPropertyName;\r\n    let childCollection = this[PropertyName];\r\n    let len = childCollection.length;\r\n    if (len) {\r\n      options[PropertyName] = [];\r\n      let childProperties = childCollection[0].controlProperties;\r\n      for (let i = 0; i < len; i++) {\r\n        options[PropertyName].push(this.util.getOptions(childCollection[i], childProperties));\r\n      }\r\n    }\r\n  }\r\n\r\n  attached() {\r\n    this.util = new Util();\r\n    this.createWidget({ element: this.element });\r\n  }\r\n/**\r\n * To change widget model value\r\n * @param property The viewModel property name\r\n * @param newValue New value of the property\r\n * @param oldvalue Pld value of the property\r\n */\r\n  propertyChanged(property, newValue, oldValue) {\r\n    if (this.widget) {\r\n      let modelValue;\r\n      let prop = this.util.getControlPropertyName(this, property);\r\n      if (prop) {\r\n        if (prop !== 'options') {\r\n          modelValue = this.widget.model[prop];\r\n          let isTwoway = typeof modelValue === 'function';\r\n          if (isTwoway) {\r\n            modelValue = modelValue();\r\n          }\r\n          if (modelValue !== newValue) {\r\n            if (isTwoway) {\r\n              newValue = this.addTwoways(prop);\r\n            }\r\n            this.widget.option(prop, newValue);\r\n          }\r\n        } else {\r\n          this.widget.option(newValue);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  detached() {\r\n    if (this.templateProcessor) {\r\n      this.templateProcessor.clearTempalte();\r\n    }\r\n    this.widget.destroy();\r\n  }\r\n}\r\n\r\n"]}