{"version":3,"sources":["common/decorators.js"],"names":[],"mappings":";;;;;;;AAKO,WAAS,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,gBAAgB,EAAE;AACvE,WAAO,UAAS,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE;AACvC,UAAI,gBAAgB,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE,oBAAoB,EAAE,MAAM,CAAC,CAAC;AAChG,UAAI,SAAS,GAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,SAAS,EAAE,AAAC,CAAC;AACxD,UAAI,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC/B,YAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACvB,UAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;AACxB,YAAM,CAAC,SAAS,CAAC,WAAW,GAAG,WAAW,CAAC;AAC3C,YAAM,CAAC,SAAS,CAAC,OAAO,GAAG,gBAAgB,GAAG,gBAAgB,GAAG,EAAE,CAAC;AACpE,UAAI,GAAG,EAAE;AACP,cAAM,CAAC,SAAS,CAAC,iBAAiB,GAAG,MAAM,CAAC;AAC5C,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC5B,cAAI,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACvB,cAAI,oBAAoB,GAAG;AACzB,gBAAI,EAAE,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC;WAC3C,CAAC;AACF,cAAI,IAAI,GAAG,IAAI,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;AACtD,cAAI,CAAC,YAAY,CAAC,MAAM,EAAE,gBAAgB,EAAE,UAAU,CAAC,CAAC;SACzD;OACF;KACF,CAAC;GACH;;;;4CA1BO,gBAAgB;gDAAE,oBAAoB;;8CACtC,SAAS;;kCACT,QAAQ;;mBACR,IAAI","file":"common/decorators.js","sourceRoot":"/source/","sourcesContent":["import {BindableProperty, HtmlBehaviorResource} from 'aurelia-templating';\r\nimport {Container} from 'aurelia-dependency-injection';\r\nimport {metadata} from 'aurelia-metadata';\r\nimport {Util} from './util';\r\n\r\nexport function generateBindables(controlName, inputs, twoWayProperties) {\r\n  return function(target, key, descriptor) {\r\n    let behaviorResource = metadata.getOrCreateOwn(metadata.resource, HtmlBehaviorResource, target);\r\n    let container = (Container.instance || new Container());\r\n    let util = container.get(Util);\r\n    inputs.push('options');\r\n    let len = inputs.length;\r\n    target.prototype.controlName = controlName;\r\n    target.prototype.twoWays = twoWayProperties ? twoWayProperties : [];\r\n    if (len) {\r\n      target.prototype.controlProperties = inputs;\r\n      for (let i = 0; i < len; i++) {\r\n        let option = inputs[i];\r\n        let nameOrConfigOrTarget = {\r\n          name: util.getBindablePropertyName(option)\r\n        };\r\n        let prop = new BindableProperty(nameOrConfigOrTarget);\r\n        prop.registerWith(target, behaviorResource, descriptor);\r\n      }\r\n    }\r\n  };\r\n}\r\n"]}