{"version":3,"sources":["common/events.js"],"names":[],"mappings":";;;;;;;;;AAQO,WAAS,cAAc,CAAC,OAAO,EAAE;AACtC,QAAI,IAAI,YAAA,CAAC;AACT,QAAI,IAAI,YAAA,CAAC;AACT,QAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACpC,QAAI,MAAM,GAAG,EAAE,CAAC;AAChB,QAAI,SAAS,GAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,SAAS,EAAE,AAAC,CAAC;AACxD,QAAI,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;0BACtB,CAAC,EAAM,GAAG;AACjB,UAAI,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AACrB,UAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACjB,UAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;AAC3C,0BAAS;OACV;AACD,UAAI,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,UAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnF,YAAM,CAAC,SAAS,CAAC,GAAG,UAAA,CAAC;eAAI,SAAS,CAAC,OAAO,EAAE,eAAe,EAAE,CAAC,CAAC;OAAA,CAAC;;;AARlE,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;uBAA9C,CAAC,EAAM,GAAG;;+BAIf,SAAS;KAKZ;AACD,WAAO,MAAM,CAAC;GACf;;AAOM,WAAS,SAAS,CAAC,OAAgB,EAAE,IAAY,EAAc;QAAZ,IAAK,yDAAG,EAAE;;AAClE,QAAI,KAAK,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE;AAChC,YAAM,EAAE,IAAI;AACZ,aAAO,EAAE,IAAI;KACd,CAAC,CAAC;AACH,WAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC7B,WAAO,KAAK,CAAC;GACd;;;;mBAxCO,IAAI;;8CACJ,SAAS;;6BACT,SAAS","file":"common/events.js","sourceRoot":"/source/","sourcesContent":["import {Util} from './util';\r\nimport {Container} from 'aurelia-dependency-injection';\r\nimport {constants} from './constants';\r\n\r\n/**\r\n* To get binded events from the element\r\n* @param element The Element from which events acquired\r\n*/\r\nexport function getEventOption(element) {\r\n  let name;\r\n  let attr;\r\n  let attributes = element.attributes;\r\n  let option = {};\r\n  let container = (Container.instance || new Container());\r\n  let util = container.get(Util);\r\n  for (let i = 0, len = attributes.length; i < len; i++) {\r\n    attr = attributes[i];\r\n    name = attr.name;\r\n    if (!name.startsWith(constants.eventPrefix)) {\r\n      continue;\r\n    }\r\n    let actualEventName = name.split('.')[0];//Event name with constants event prefix\r\n    let eventName = util._unhyphenate(actualEventName.split(constants.eventPrefix)[1]);\r\n    option[eventName] = e => fireEvent(element, actualEventName, e);\r\n  }\r\n  return option;\r\n}\r\n/**\r\n* Fire DOM event on an element\r\n* @param element The Element which the DOM event will be fired on\r\n* @param name The Event's name\r\n* @param data Addition data to attach to an event\r\n*/\r\nexport function fireEvent(element: Element, name: string, data? = {}) {\r\n  let event = new CustomEvent(name, {\r\n    detail: data,\r\n    bubbles: true\r\n  });\r\n  element.dispatchEvent(event);\r\n  return event;\r\n}\r\n"]}