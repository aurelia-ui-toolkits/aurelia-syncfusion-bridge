{"version":3,"sources":["common/util.js"],"names":[],"mappings":";;;iBAEa,IAAI;;;;;;6BAFT,SAAS;;;AAEJ,UAAI;iBAAJ,IAAI;gCAAJ,IAAI;;;AAAJ,YAAI,WAEf,uBAAuB,GAAA,iCAAC,YAAoB,EAAU;AACpD,cAAI,IAAI,QAAM,SAAS,CAAC,cAAc,GAAG,YAAY,AAAE,CAAC;AACxD,iBAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAChC;;AALU,YAAI,WAOf,YAAY,GAAA,sBAAC,IAAY,EAAU;AACjC,iBAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,UAAC,CAAC;mBAAK,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;WAAA,CAAC,CAAC;SAC7D;;AATU,YAAI,WAWf,UAAU,GAAA,oBAAC,KAAK,EAAE,UAAU,EAAG;AAC7B,cAAI,kBAAkB,GAAG,EAAE,CAAC;AAC5B,+BAAiB,UAAU,kHAAE;;;;;;;;;;;;gBAApB,IAAI;;AACX,gBAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;AACtD,gBAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACxB,kBAAI,OAAO,KAAK,KAAK,QAAQ,EAAG;AAC9B,qBAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;eACjC;AACD,gCAAkB,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;aAClC;WACF;AACD,iBAAO,kBAAkB,CAAC;SAC3B;;AAvBU,YAAI,WAyBf,sBAAsB,GAAA,gCAAC,OAAO,EAAE,YAAY,EAAE;AAC5C,cAAI,QAAQ,YAAA,CAAC;AACb,gCAAiB,OAAO,CAAC,iBAAiB,yHAAE;;;;;;;;;;;;gBAAnC,IAAI;;AACX,gBAAI,YAAY,KAAK,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE;AACvD,sBAAQ,GAAG,IAAI,CAAC;AAChB,oBAAM;aACP;WACF;AACD,iBAAO,QAAQ,CAAC;SACjB;;AAlCU,YAAI,WAoCf,QAAQ,GAAA,kBAAC,IAAI,EAAE;AACb,iBAAO,OAAQ,IAAI,AAAC,KAAK,WAAW,IAAI,IAAI,KAAK,IAAI,CAAC;SACvD;;AAtCU,YAAI,WAwCf,WAAW,GAAA,qBAAC,KAAK,EAAE;AACjB,cAAI,KAAK,KAAK,MAAM,EAAE;AACpB,mBAAO,IAAI,CAAC;WACb,MAAM,IAAI,KAAK,KAAK,OAAO,EAAE;AAC5B,mBAAO,KAAK,CAAC;WACd,MAAM,IAAI,CAAC,KAAK,GAAG,EAAE,KAAK,KAAK,EAAE;AAChC,mBAAO,CAAC,KAAK,CAAC;WACf;AACD,iBAAO,KAAK,CAAC;SACd;;eAjDU,IAAI","file":"common/util.js","sourceRoot":"/source/","sourcesContent":["import {constants} from './constants';\r\n\r\nexport class Util {\r\n\r\n  getBindablePropertyName(propertyName: string): string {\r\n    let name = `${constants.bindablePrefix}${propertyName}`;\r\n    return this._unhyphenate(name);\r\n  }\r\n\r\n  _unhyphenate(name: string): string {\r\n    return name.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\r\n  }\r\n\r\n  getOptions(model, properties ) {\r\n    let bindableproperites = {};\r\n    for (let prop of properties) {\r\n      let value = model[this.getBindablePropertyName(prop)];\r\n      if (this.hasValue(value)) {\r\n        if (typeof value === 'string' ) {\r\n          value = this.processData(value);\r\n        }\r\n        bindableproperites[prop] = value;\r\n      }\r\n    }\r\n    return bindableproperites;\r\n  }\r\n\r\n  getControlPropertyName(options, propertyName) {\r\n    let property;\r\n    for (let prop of options.controlProperties) {\r\n      if (propertyName === this.getBindablePropertyName(prop)) {\r\n        property = prop;\r\n        break;\r\n      }\r\n    }\r\n    return property;\r\n  }\r\n\r\n  hasValue(prop) {\r\n    return typeof (prop) !== 'undefined' && prop !== null;\r\n  }\r\n\r\n  processData(value) {\r\n    if (value === 'true') {\r\n      return true;\r\n    } else if (value === 'false') {\r\n      return false;\r\n    } else if (+value + '' === value) {\r\n      return +value;\r\n    }\r\n    return value;\r\n  }\r\n}\r\n"]}